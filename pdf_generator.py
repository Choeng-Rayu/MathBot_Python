import os
import base64
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from reportlab.lib.units import inch
import io
from PIL import Image as PILImage
from config import Config

class PDFGenerator:
    def __init__(self):
        self.page_width, self.page_height = A4
        self.margin = 50
        self.styles = getSampleStyleSheet()
        
        # Ensure temp directory exists
        os.makedirs(Config.TEMP_DIR, exist_ok=True)
    
    def generate_math_pdf(self, expression: str, result: str, steps: str = None, user_id: int = None) -> str:
        """Generate PDF for math expression solution"""
        filename = f"{Config.TEMP_DIR}/math_solution_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        
        try:
            c = canvas.Canvas(filename, pagesize=A4)
            
            # Title
            c.setFont("Helvetica-Bold", 20)
            c.drawString(self.margin, self.page_height - 80, "Mathematical Expression Solution")
            
            # Date
            c.setFont("Helvetica", 10)
            c.drawString(self.margin, self.page_height - 100, f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
            # Expression
            c.setFont("Helvetica-Bold", 14)
            c.drawString(self.margin, self.page_height - 140, "Expression:")
            c.setFont("Helvetica", 12)
            c.drawString(self.margin + 20, self.page_height - 160, expression)
            
            # Result
            c.setFont("Helvetica-Bold", 14)
            c.drawString(self.margin, self.page_height - 200, "Result:")
            c.setFont("Helvetica", 12)
            c.drawString(self.margin + 20, self.page_height - 220, result)
            
            # Steps (if available)
            if steps:
                c.setFont("Helvetica-Bold", 14)
                c.drawString(self.margin, self.page_height - 260, "Solution Steps:")
                c.setFont("Helvetica", 10)
                
                y_position = self.page_height - 280
                for line in steps.split('\n'):
                    if y_position < 100:  # Start new page if needed
                        c.showPage()
                        y_position = self.page_height - 80
                    c.drawString(self.margin + 20, y_position, line)
                    y_position -= 20
            
            # Footer
            c.setFont("Helvetica-Oblique", 8)
            c.drawString(self.margin, 30, "Generated by MathBot - Telegram Mathematical Assistant")
            
            c.save()
            return filename
            
        except Exception as e:
            print(f"Error generating math PDF: {e}")
            return None
    
    def generate_function_pdf(self, analysis: dict, graph_base64: str = None, user_id: int = None) -> str:
        """Generate PDF for function analysis with complete step-by-step structure"""
        filename = f"{Config.TEMP_DIR}/function_analysis_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"

        try:
            c = canvas.Canvas(filename, pagesize=A4)

            # Title
            c.setFont("Helvetica-Bold", 20)
            c.drawString(self.margin, self.page_height - 80, "Complete Function Analysis")

            # Subtitle
            c.setFont("Helvetica", 12)
            c.drawString(self.margin, self.page_height - 105, "Following Educational Mathematical Procedure")

            # Date
            c.setFont("Helvetica", 10)
            c.drawString(self.margin, self.page_height - 125, f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

            y_position = self.page_height - 160

            # Function being analyzed
            c.setFont("Helvetica-Bold", 14)
            c.drawString(self.margin, y_position, f"Function: f(x) = {analysis.get('function', 'N/A')}")
            y_position -= 40

            # Step-by-step analysis following the exact procedure
            steps = [
                ('step1_definition', '1. Function Definition and Domain'),
                ('step2_domain', '2. Domain Analysis'),
                ('step3_derivative', '3. Derivative Analysis'),
                ('step4_limits', '4. Limits Evaluation'),
                ('step5_critical_points', '5. Critical Points Analysis'),
                ('step6_table_values', '6. Table of Values'),
                ('step7_variation_table', '7. Table of Variations'),
                ('step8_sign_table', '8. Table of Signs'),
                ('step9_intercepts', '9. Intercepts Analysis'),
                ('step10_asymptotes', '10. Asymptotes Analysis'),
                ('step11_graph_description', '11. Graph Description')
            ]

            for step_key, step_title in steps:
                if step_key in analysis and analysis[step_key]:
                    # Check if we need a new page
                    if y_position < 150:
                        c.showPage()
                        y_position = self.page_height - 80

                    # Step title
                    c.setFont("Helvetica-Bold", 13)
                    c.drawString(self.margin, y_position, step_title)
                    y_position -= 20

                    # Step content
                    content = str(analysis[step_key])

                    # Handle different content types
                    if step_key == 'step6_table_values':
                        # Special formatting for table of values
                        c.setFont("Courier", 9)
                        lines = content.split('\n')
                        for line in lines:
                            if y_position < 80:
                                c.showPage()
                                y_position = self.page_height - 80
                            c.drawString(self.margin + 20, y_position, line)
                            y_position -= 12

                    elif step_key == 'step7_variation_table':
                        # Special formatting for variation table
                        c.setFont("Courier", 9)
                        lines = content.split('\n')
                        for line in lines:
                            if y_position < 80:
                                c.showPage()
                                y_position = self.page_height - 80
                            c.drawString(self.margin + 20, y_position, line)
                            y_position -= 12

                    elif step_key == 'step8_sign_table':
                        # Special formatting for sign table
                        c.setFont("Courier", 9)
                        lines = content.split('\n')
                        for line in lines:
                            if y_position < 80:
                                c.showPage()
                                y_position = self.page_height - 80
                            c.drawString(self.margin + 20, y_position, line)
                            y_position -= 12

                    else:
                        # Regular content formatting
                        c.setFont("Helvetica", 10)
                        lines = content.split('\n')
                        for line in lines:
                            if y_position < 80:
                                c.showPage()
                                y_position = self.page_height - 80

                            # Handle long lines by wrapping
                            if len(line) > 85:
                                words = line.split(' ')
                                current_line = ""
                                for word in words:
                                    if len(current_line + word) < 85:
                                        current_line += word + " "
                                    else:
                                        if current_line:
                                            c.drawString(self.margin + 20, y_position, current_line.strip())
                                            y_position -= 12
                                        current_line = word + " "
                                if current_line:
                                    c.drawString(self.margin + 20, y_position, current_line.strip())
                                    y_position -= 12
                            else:
                                c.drawString(self.margin + 20, y_position, line)
                                y_position -= 12

                    y_position -= 15  # Extra space between steps

            # Add graph on new page
            c.showPage()
            y_position = self.page_height - 80

            # Graph section title
            c.setFont("Helvetica-Bold", 18)
            c.drawString(self.margin, y_position, "Graphical Representation")
            y_position -= 40

            # Add graph if available
            if graph_base64:
                try:
                    # Decode base64 image
                    img_data = base64.b64decode(graph_base64)
                    img = PILImage.open(io.BytesIO(img_data))

                    # Save temporary image
                    temp_img_path = f"{Config.TEMP_DIR}/temp_graph_{user_id}.png"
                    img.save(temp_img_path)

                    # Add image to PDF
                    c.drawImage(temp_img_path, self.margin, y_position - 350,
                              width=450, height=300, preserveAspectRatio=True)

                    # Clean up temporary image
                    os.remove(temp_img_path)

                    y_position -= 370

                except Exception as e:
                    print(f"Error adding graph to PDF: {e}")
                    c.setFont("Helvetica", 12)
                    c.drawString(self.margin, y_position, "Graph could not be generated")
                    y_position -= 30
            else:
                c.setFont("Helvetica", 12)
                c.drawString(self.margin, y_position, "Graph visualization not available")
                y_position -= 30

            # Add disclaimer section
            y_position -= 30
            c.setFont("Helvetica-Bold", 14)
            c.drawString(self.margin, y_position, "Disclaimer and References")
            y_position -= 25

            c.setFont("Helvetica", 10)
            disclaimer_lines = [
                "The results presented in this analysis are generated by an automated",
                "mathematical program using symbolic computation. While every effort has",
                "been made to ensure accuracy, the results are not guaranteed to be exact",
                "in all cases. This analysis is intended for educational purposes.",
                "",
                "This implementation follows the educational mathematical procedure for",
                "complete function analysis, including domain definition, derivative",
                "computation, limits evaluation, tables of values/variations/signs,",
                "and graphical representation.",
                "",
                "For additional mathematical tools and applications:",
                "• Repository: https://github.com/choengrayu/mathbot",
                "• Website: https://rayuchoeng-profolio-website.netlify.app/",
                "• Creator: Choeng Rayu (@President_Alein)",
                "• Email: choengrayu307@gmail.com",
                "",
                f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
                "MathBot - Free Mathematical Assistant"
            ]

            for line in disclaimer_lines:
                if y_position < 50:
                    c.showPage()
                    y_position = self.page_height - 80
                c.drawString(self.margin, y_position, line)
                y_position -= 12

            # Save the PDF
            c.save()
            return filename

        except Exception as e:
            print(f"Error generating function PDF: {e}")
            return None
    
    def cleanup_file(self, filename: str):
        """Delete a temporary file"""
        try:
            if os.path.exists(filename):
                os.remove(filename)
        except Exception as e:
            print(f"Error cleaning up file {filename}: {e}")

# Global PDF generator instance
pdf_generator = PDFGenerator()
